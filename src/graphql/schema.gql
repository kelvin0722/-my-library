scalar DateTime
scalar Email

type User {
  id: Int!
  email: Email!
  firstName: String
  lastName: String
  createdAt: DateTime!
  books: [Book]
}

type Book {
  id: Int!
  title: String!
  author: String!
  coverImage: String
  collectionStatus: CollectionStatus
  rating: Int
  createdAt: DateTime!
}

type AuthPayload {
  token: String!
  user: User!
}

type RemoveBookResponse {
  success: Boolean
}
enum CollectionStatus {
  WANT_TO_READ
  READING
  READ
}

input AddBookInput {
  title: String!
  author: String!
  coverImage: String
}

input UpdateBookInput {
  id: Int!
  title: String!
  author: String!
  coverImage: String
}

input UserInput {
  email: Email!
  firstName: String
  lastName: String
  password: String!
}

input AuthInput {
  email: Email!
  password: String!
}

input AddToCollectionInput {
  bookId: Int!
  status: CollectionStatus
}

type ViewCollectionPayload {
  id: Int!
  books: [BookPayload]
}
type AddToCollectionPayload {
  id: Int!
  user: User!
  books: [BookPayload]
}

type BookPayload {
  id: Int!
  title: String!
  author: String!
  coverImage: String
  collectionStatus: String
  rating: Int
  createdAt: DateTime!
}

input RatingInput {
   bookId: Int!
   rating: Int!
}

type RatingPayload {
   id: Int!
   user: User!
   books: [BookPayload]
}


type Query {
  books: [Book!]!
  book(id: String!): Book!

  viewCollection: ViewCollectionPayload!
}

type Mutation {
  login(input: AuthInput!): AuthPayload!
  signup(input: UserInput!): User!

  addBook(input: AddBookInput!): BookPayload!
  updateBook(input: UpdateBookInput!): BookPayload!
  removeBook(id: Int!): RemoveBookResponse!

  addToCollection(input: AddToCollectionInput!): AddToCollectionPayload!
  rateBookInCollection(input: RatingInput!): RatingPayload!
}
